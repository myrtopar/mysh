#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/stat.h>
#include "functions.h"

#define MAX_CHAR_INPUT 300
#define MAX_ARGS 30

int main()
{

    char *input = malloc(MAX_CHAR_INPUT);
    char *token_array[MAX_ARGS];
    int count = 0;

    while (1)
    {
        printf("in-mysh-now:> ");
        fflush(stdout);

        fgets(input, MAX_CHAR_INPUT, stdin);

        char *ptrchr;
        if ((ptrchr = strchr(input, '\n')) != NULL)
            *ptrchr = '\0';

        if ((ptrchr = strchr(input, '\r')) != NULL)
            *ptrchr = '\0';

        int occ = occurences(input, '>') + occurences(input, '<') + occurences(input, '|');

        int redirect_output_flag = if_exists(input, '>');
        int redirect_input_flag = if_exists(input, '<');
        int pipe_flag = if_exists(input, '|');

        input = add_whitespaces(input, occ);

        // parse me strtok to input pou pira me tin fgets
        // to token_array exei ta tokens tou input spasmena: px gia entolh input ls -al: token_array[0] = ls, token_array[1] = -al
        int count = 0;
        char *token = strtok(input, " \t");
        while (token != NULL)
        {
            token_array[count] = token;
            count++;
            token = strtok(NULL, " \t");
        }

        if (count == 0) // αν η γραμμη δεν εχει κανενα token, προχώρα
            continue;

        // for (int i = 0; i < count; i++)
        // {
        //     fprintf(stdout, "%s\n", token_array[i]);
        // }

        pid_t pid;
        int status, exit_status;

        if ((pid = fork()) < 0)
            perror("fork failed");

        if (pid == 0) // child process
        {
            token_array[count++] = NULL;
            if (!redirect_input_flag && !redirect_output_flag && !pipe_flag) // executing simple commands
            {
                if (execvp(token_array[0], token_array) < 0) // ti ginetai meta tin exec an ektelestei epityxws? kanei exit to process automata?
                {
                    perror("Error executing command");
                    printf("Error code: %d\n", errno);
                    exit(EXIT_FAILURE);
                }
            }
            else if (redirect_input_flag || redirect_output_flag) // handling redirections  
            {
                int fd;
                // na ftiaksw ena array pou na exei ta tokens mexri prin to < gia na kanw me auta execvp
                char *to_exec[count];
                for (int i = 0; i != NULL; i++)
                {

                    if (!strcmp(token_array[i], "<"))
                    { // redirect output

                        fd = open(token_array[i + 1], O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
                        if (dup2(fd, STDOUT_FILENO) < 0)
                        {
                            perror("Error redirecting output");
                            return 1; // pou tha kanei to return?
                        }
                        execvp(to_exec[0], to_exec);
                    }
                    else
                    {
                        to_exec[i] = token_array[i];
                    }
                }
            }
        }

        else // parent process
        {
            if (wait(&status) != pid)
            { // check if child returns
                // if(redirect_input_flag || redirect_output_flag){
                //     close
                // }

                exit(1);
            }
            // printf("Child terminated with exit code %d\n", WEXITSTATUS(status));
        }
    }

    return 0;
}

// na xwrisw tis kanonikes entoles apo ta redirection commands. Kai sto kathe case na kanw ekei mesa fork